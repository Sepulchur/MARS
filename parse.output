Terminals unused in grammar

   UMINUS


State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | program stmt

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt

    8 $@1: %empty

    9 stmt: BREAK $@1 SEMICOLON

   10 $@2: %empty

   11 stmt: CONTINUE $@2 SEMICOLON
   12     | block
   13     | funcdef
   14     | SEMICOLON

   15 list_of_stmts: stmt list_of_stmts
   16              | %empty

   17 expr: assignexpr
   18     | expr ADD expr
   19     | expr MINUS expr
   20     | expr MULTIPLICATION expr
   21     | expr DIVISION expr
   22     | expr MODULO expr
   23     | expr EQUAL expr
   24     | expr UNEQUAL expr
   25     | expr GREATER expr
   26     | expr LESS expr
   27     | expr GREATEROREQUAL expr
   28     | expr LESSOREQUAL expr

   29 $@3: %empty

   30 expr: expr AND $@3 M expr

   31 $@4: %empty

   32 expr: expr OR $@4 M expr
   33     | term

   34 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   35     | MINUS expr
   36     | NOT expr
   37     | INCREMENT lvalue
   38     | lvalue INCREMENT
   39     | DECREMENT lvalue
   40     | lvalue DECREMENT
   41     | primary

   42 $@5: %empty

   43 $@6: %empty

   44 assignexpr: lvalue $@5 ASSIGN $@6 expr

   45 primary: lvalue
   46        | call
   47        | objectdef
   48        | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS
   49        | const

   50 lvalue: IDENTIFIER
   51       | LOCAL IDENTIFIER
   52       | DOUBLE_COLON IDENTIFIER
   53       | member

   54 member: lvalue PERIOD IDENTIFIER
   55       | lvalue LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE
   56       | call PERIOD IDENTIFIER
   57       | call LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE

   58 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS
   59     | IDENTIFIER callsufix
   60     | LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   61 callsufix: normallcall
   62          | methodcall

   63 normallcall: LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   64 methodcall: DOUBLE_PERIOD IDENTIFIER LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

   65 elist: %empty
   66      | expr
   67      | elist COMMA expr

   68 objectdef: LEFT_SQUARE_BRACE elist RIGHT_SQUARE_BRACE
   69          | LEFT_SQUARE_BRACE indexed RIGHT_SQUARE_BRACE

   70 indexed: indexedelem
   71        | indexed COMMA indexedelem

   72 indexedelem: LEFT_CURLY_BRACE expr COLON expr RIGHT_CURLY_BRACE

   73 $@7: %empty

   74 block: LEFT_CURLY_BRACE $@7 list_of_stmts RIGHT_CURLY_BRACE

   75 @8: %empty

   76 $@9: %empty

   77 $@10: %empty

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 block

   79 @11: %empty

   80 $@12: %empty

   81 $@13: %empty

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

   83 const: INTEGER
   84      | REAL
   85      | STRING
   86      | NIL
   87      | TRUE
   88      | FALSE

   89 idlist: %empty
   90       | IDENTIFIER
   91       | idlist COMMA IDENTIFIER

   92 N: %empty

   93 M: %empty

   94 ifprefix: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

   95 ifstmt: ifprefix stmt
   96       | ifprefix stmt elseprefix stmt

   97 elseprefix: ELSE

   98 whilestart: WHILE

   99 whilecond: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  100 whilestmt: whilestart whilecond stmt

  101 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON

  102 $@14: %empty

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS $@14 N stmt N

  104 $@15: %empty

  105 returnstmt: RETURN $@15 expr SEMICOLON

  106 $@16: %empty

  107 returnstmt: RETURN $@16 SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 50 51 52 54 56 59 64 78 90 91
STRING (259) 85
INTEGER (260) 83
REAL (261) 84
IF (262) 94
ELSE (263) 97
WHILE (264) 98
FOR (265) 101
RETURN (266) 105 107
BREAK (267) 9
CONTINUE (268) 11
AND (269) 30
NOT (270) 36
OR (271) 32
LOCAL (272) 51
TRUE (273) 87
FALSE (274) 88
NIL (275) 86
FUNCTION (276) 78 82
ASSIGN (277) 44
ADD (278) 18
MINUS (279) 19 35
MULTIPLICATION (280) 20
DIVISION (281) 21
MODULO (282) 22
EQUAL (283) 23
UNEQUAL (284) 24
INCREMENT (285) 37 38
DECREMENT (286) 39 40
GREATER (287) 25
LESS (288) 26
GREATEROREQUAL (289) 27
LESSOREQUAL (290) 28
LEFT_CURLY_BRACE (291) 72 74
RIGHT_CURLY_BRACE (292) 72 74
LEFT_SQUARE_BRACE (293) 55 57 68 69
RIGHT_SQUARE_BRACE (294) 55 57 68 69
LEFT_PARENTHESIS (295) 34 48 58 60 63 64 78 82 94 99 101
RIGHT_PARENTHESIS (296) 34 48 58 60 63 64 78 82 94 99 103
SEMICOLON (297) 3 9 11 14 101 105 107
COMMA (298) 67 71 91
COLON (299) 72
DOUBLE_COLON (300) 52
PERIOD (301) 54 56
DOUBLE_PERIOD (302) 64
UMINUS (303)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 2
stmt (51)
    on left: 3 4 5 6 7 9 11 12 13 14, on right: 2 15 95 96 100 103
$@1 (52)
    on left: 8, on right: 9
$@2 (53)
    on left: 10, on right: 11
list_of_stmts (54)
    on left: 15 16, on right: 15 74
expr (55)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 30 32 33, on right:
    3 18 19 20 21 22 23 24 25 26 27 28 30 32 34 35 36 44 55 57 66 67
    72 94 99 101 105
$@3 (56)
    on left: 29, on right: 30
$@4 (57)
    on left: 31, on right: 32
term (58)
    on left: 34 35 36 37 38 39 40 41, on right: 33
assignexpr (59)
    on left: 44, on right: 17
$@5 (60)
    on left: 42, on right: 44
$@6 (61)
    on left: 43, on right: 44
primary (62)
    on left: 45 46 47 48 49, on right: 41
lvalue (63)
    on left: 50 51 52 53, on right: 37 38 39 40 44 45 54 55
member (64)
    on left: 54 55 56 57, on right: 53
call (65)
    on left: 58 59 60, on right: 46 56 57 58
callsufix (66)
    on left: 61 62, on right: 59
normallcall (67)
    on left: 63, on right: 61
methodcall (68)
    on left: 64, on right: 62
elist (69)
    on left: 65 66 67, on right: 58 60 63 64 67 68 101 103
objectdef (70)
    on left: 68 69, on right: 47
indexed (71)
    on left: 70 71, on right: 69 71
indexedelem (72)
    on left: 72, on right: 70 71
block (73)
    on left: 74, on right: 12 78 82
$@7 (74)
    on left: 73, on right: 74
funcdef (75)
    on left: 78 82, on right: 13 48 60
@8 (76)
    on left: 75, on right: 78
$@9 (77)
    on left: 76, on right: 78
$@10 (78)
    on left: 77, on right: 78
@11 (79)
    on left: 79, on right: 82
$@12 (80)
    on left: 80, on right: 82
$@13 (81)
    on left: 81, on right: 82
const (82)
    on left: 83 84 85 86 87 88, on right: 49
idlist (83)
    on left: 89 90 91, on right: 78 82 91
N (84)
    on left: 92, on right: 103
M (85)
    on left: 93, on right: 30 32 101
ifprefix (86)
    on left: 94, on right: 95 96
ifstmt (87)
    on left: 95 96, on right: 4
elseprefix (88)
    on left: 97, on right: 96
whilestart (89)
    on left: 98, on right: 100
whilecond (90)
    on left: 99, on right: 100
whilestmt (91)
    on left: 100, on right: 5
forprefix (92)
    on left: 101, on right: 103
forstmt (93)
    on left: 103, on right: 6
$@14 (94)
    on left: 102, on right: 103
returnstmt (95)
    on left: 105 107, on right: 7
$@15 (96)
    on left: 104, on right: 105
$@16 (97)
    on left: 106, on right: 107


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    2 program: program . stmt

    $end               shift, and go to state 2
    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    stmt        go to state 27
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 2

    0 $accept: program $end .

    $default  accept


State 3

   50 lvalue: IDENTIFIER .
   59 call: IDENTIFIER . callsufix

    LEFT_PARENTHESIS  shift, and go to state 46
    DOUBLE_PERIOD     shift, and go to state 47

    $default  reduce using rule 50 (lvalue)

    callsufix    go to state 48
    normallcall  go to state 49
    methodcall   go to state 50


State 4

   85 const: STRING .

    $default  reduce using rule 85 (const)


State 5

   83 const: INTEGER .

    $default  reduce using rule 83 (const)


State 6

   84 const: REAL .

    $default  reduce using rule 84 (const)


State 7

   94 ifprefix: IF . LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 51


State 8

   98 whilestart: WHILE .

    $default  reduce using rule 98 (whilestart)


State 9

  101 forprefix: FOR . LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 52


State 10

  105 returnstmt: RETURN . $@15 expr SEMICOLON
  107           | RETURN . $@16 SEMICOLON

    SEMICOLON  reduce using rule 106 ($@16)
    $default   reduce using rule 104 ($@15)

    $@15  go to state 53
    $@16  go to state 54


State 11

    9 stmt: BREAK . $@1 SEMICOLON

    $default  reduce using rule 8 ($@1)

    $@1  go to state 55


State 12

   11 stmt: CONTINUE . $@2 SEMICOLON

    $default  reduce using rule 10 ($@2)

    $@2  go to state 56


State 13

   36 term: NOT . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 57
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 14

   51 lvalue: LOCAL . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 15

   87 const: TRUE .

    $default  reduce using rule 87 (const)


State 16

   88 const: FALSE .

    $default  reduce using rule 88 (const)


State 17

   86 const: NIL .

    $default  reduce using rule 86 (const)


State 18

   78 funcdef: FUNCTION . IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 block
   82        | FUNCTION . @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

    IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 79 (@11)

    @11  go to state 60


State 19

   35 term: MINUS . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 61
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 20

   37 term: INCREMENT . lvalue

    IDENTIFIER        shift, and go to state 3
    LOCAL             shift, and go to state 14
    LEFT_PARENTHESIS  shift, and go to state 62
    DOUBLE_COLON      shift, and go to state 26

    lvalue  go to state 63
    member  go to state 33
    call    go to state 64


State 21

   39 term: DECREMENT . lvalue

    IDENTIFIER        shift, and go to state 3
    LOCAL             shift, and go to state 14
    LEFT_PARENTHESIS  shift, and go to state 62
    DOUBLE_COLON      shift, and go to state 26

    lvalue  go to state 65
    member  go to state 33
    call    go to state 64


State 22

   74 block: LEFT_CURLY_BRACE . $@7 list_of_stmts RIGHT_CURLY_BRACE

    $default  reduce using rule 73 ($@7)

    $@7  go to state 66


State 23

   68 objectdef: LEFT_SQUARE_BRACE . elist RIGHT_SQUARE_BRACE
   69          | LEFT_SQUARE_BRACE . indexed RIGHT_SQUARE_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 67
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr         go to state 68
    term         go to state 29
    assignexpr   go to state 30
    primary      go to state 31
    lvalue       go to state 32
    member       go to state 33
    call         go to state 34
    elist        go to state 69
    objectdef    go to state 35
    indexed      go to state 70
    indexedelem  go to state 71
    const        go to state 38


State 24

   34 term: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS
   48 primary: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS
   60 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 72
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    funcdef     go to state 73
    const       go to state 38


State 25

   14 stmt: SEMICOLON .

    $default  reduce using rule 14 (stmt)


State 26

   52 lvalue: DOUBLE_COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 74


State 27

    2 program: program stmt .

    $default  reduce using rule 2 (program)


State 28

    3 stmt: expr . SEMICOLON
   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87
    SEMICOLON       shift, and go to state 88


State 29

   33 expr: term .

    $default  reduce using rule 33 (expr)


State 30

   17 expr: assignexpr .

    $default  reduce using rule 17 (expr)


State 31

   41 term: primary .

    $default  reduce using rule 41 (term)


State 32

   38 term: lvalue . INCREMENT
   40     | lvalue . DECREMENT
   44 assignexpr: lvalue . $@5 ASSIGN $@6 expr
   45 primary: lvalue .
   54 member: lvalue . PERIOD IDENTIFIER
   55       | lvalue . LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE

    INCREMENT          shift, and go to state 89
    DECREMENT          shift, and go to state 90
    LEFT_SQUARE_BRACE  shift, and go to state 91
    PERIOD             shift, and go to state 92

    ASSIGN    reduce using rule 42 ($@5)
    $default  reduce using rule 45 (primary)

    $@5  go to state 93


State 33

   53 lvalue: member .

    $default  reduce using rule 53 (lvalue)


State 34

   46 primary: call .
   56 member: call . PERIOD IDENTIFIER
   57       | call . LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE
   58 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACE  shift, and go to state 94
    LEFT_PARENTHESIS   shift, and go to state 95
    PERIOD             shift, and go to state 96

    $default  reduce using rule 46 (primary)


State 35

   47 primary: objectdef .

    $default  reduce using rule 47 (primary)


State 36

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 37

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 38

   49 primary: const .

    $default  reduce using rule 49 (primary)


State 39

   95 ifstmt: ifprefix . stmt
   96       | ifprefix . stmt elseprefix stmt

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    stmt        go to state 97
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 40

    4 stmt: ifstmt .

    $default  reduce using rule 4 (stmt)


State 41

  100 whilestmt: whilestart . whilecond stmt

    LEFT_PARENTHESIS  shift, and go to state 98

    whilecond  go to state 99


State 42

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


State 43

  103 forstmt: forprefix . N elist RIGHT_PARENTHESIS $@14 N stmt N

    $default  reduce using rule 92 (N)

    N  go to state 100


State 44

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


State 45

    7 stmt: returnstmt .

    $default  reduce using rule 7 (stmt)


State 46

   63 normallcall: LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 101
    objectdef   go to state 35
    const       go to state 38


State 47

   64 methodcall: DOUBLE_PERIOD . IDENTIFIER LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    IDENTIFIER  shift, and go to state 102


State 48

   59 call: IDENTIFIER callsufix .

    $default  reduce using rule 59 (call)


State 49

   61 callsufix: normallcall .

    $default  reduce using rule 61 (callsufix)


State 50

   62 callsufix: methodcall .

    $default  reduce using rule 62 (callsufix)


State 51

   94 ifprefix: IF LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 103
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 52

  101 forprefix: FOR LEFT_PARENTHESIS . elist SEMICOLON M expr SEMICOLON

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 104
    objectdef   go to state 35
    const       go to state 38


State 53

  105 returnstmt: RETURN $@15 . expr SEMICOLON

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 105
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 54

  107 returnstmt: RETURN $@16 . SEMICOLON

    SEMICOLON  shift, and go to state 106


State 55

    9 stmt: BREAK $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 107


State 56

   11 stmt: CONTINUE $@2 . SEMICOLON

    SEMICOLON  shift, and go to state 108


State 57

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   36 term: NOT expr .

    $default  reduce using rule 36 (term)


State 58

   51 lvalue: LOCAL IDENTIFIER .

    $default  reduce using rule 51 (lvalue)


State 59

   78 funcdef: FUNCTION IDENTIFIER . @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 block

    $default  reduce using rule 75 (@8)

    @8  go to state 109


State 60

   82 funcdef: FUNCTION @11 . LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block

    LEFT_PARENTHESIS  shift, and go to state 110


State 61

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   35 term: MINUS expr .

    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    $default  reduce using rule 35 (term)


State 62

   60 call: LEFT_PARENTHESIS . funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    FUNCTION  shift, and go to state 18

    funcdef  go to state 111


State 63

   37 term: INCREMENT lvalue .
   54 member: lvalue . PERIOD IDENTIFIER
   55       | lvalue . LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE

    LEFT_SQUARE_BRACE  shift, and go to state 91
    PERIOD             shift, and go to state 92

    $default  reduce using rule 37 (term)


State 64

   56 member: call . PERIOD IDENTIFIER
   57       | call . LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE
   58 call: call . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_SQUARE_BRACE  shift, and go to state 94
    LEFT_PARENTHESIS   shift, and go to state 95
    PERIOD             shift, and go to state 96


State 65

   39 term: DECREMENT lvalue .
   54 member: lvalue . PERIOD IDENTIFIER
   55       | lvalue . LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE

    LEFT_SQUARE_BRACE  shift, and go to state 91
    PERIOD             shift, and go to state 92

    $default  reduce using rule 39 (term)


State 66

   74 block: LEFT_CURLY_BRACE $@7 . list_of_stmts RIGHT_CURLY_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 16 (list_of_stmts)

    stmt           go to state 112
    list_of_stmts  go to state 113
    expr           go to state 28
    term           go to state 29
    assignexpr     go to state 30
    primary        go to state 31
    lvalue         go to state 32
    member         go to state 33
    call           go to state 34
    objectdef      go to state 35
    block          go to state 36
    funcdef        go to state 37
    const          go to state 38
    ifprefix       go to state 39
    ifstmt         go to state 40
    whilestart     go to state 41
    whilestmt      go to state 42
    forprefix      go to state 43
    forstmt        go to state 44
    returnstmt     go to state 45


State 67

   72 indexedelem: LEFT_CURLY_BRACE . expr COLON expr RIGHT_CURLY_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 114
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 68

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   66 elist: expr .

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    $default  reduce using rule 66 (elist)


State 69

   67 elist: elist . COMMA expr
   68 objectdef: LEFT_SQUARE_BRACE elist . RIGHT_SQUARE_BRACE

    RIGHT_SQUARE_BRACE  shift, and go to state 115
    COMMA               shift, and go to state 116


State 70

   69 objectdef: LEFT_SQUARE_BRACE indexed . RIGHT_SQUARE_BRACE
   71 indexed: indexed . COMMA indexedelem

    RIGHT_SQUARE_BRACE  shift, and go to state 117
    COMMA               shift, and go to state 118


State 71

   70 indexed: indexedelem .

    $default  reduce using rule 70 (indexed)


State 72

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   34 term: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 75
    OR                 shift, and go to state 76
    ADD                shift, and go to state 77
    MINUS              shift, and go to state 78
    MULTIPLICATION     shift, and go to state 79
    DIVISION           shift, and go to state 80
    MODULO             shift, and go to state 81
    EQUAL              shift, and go to state 82
    UNEQUAL            shift, and go to state 83
    GREATER            shift, and go to state 84
    LESS               shift, and go to state 85
    GREATEROREQUAL     shift, and go to state 86
    LESSOREQUAL        shift, and go to state 87
    RIGHT_PARENTHESIS  shift, and go to state 119


State 73

   48 primary: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS
   60 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 120


State 74

   52 lvalue: DOUBLE_COLON IDENTIFIER .

    $default  reduce using rule 52 (lvalue)


State 75

   30 expr: expr AND . $@3 M expr

    $default  reduce using rule 29 ($@3)

    $@3  go to state 121


State 76

   32 expr: expr OR . $@4 M expr

    $default  reduce using rule 31 ($@4)

    $@4  go to state 122


State 77

   18 expr: expr ADD . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 123
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 78

   19 expr: expr MINUS . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 124
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 79

   20 expr: expr MULTIPLICATION . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 125
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 80

   21 expr: expr DIVISION . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 126
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 81

   22 expr: expr MODULO . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 127
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 82

   23 expr: expr EQUAL . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 128
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 83

   24 expr: expr UNEQUAL . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 129
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 84

   25 expr: expr GREATER . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 130
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 85

   26 expr: expr LESS . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 131
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 86

   27 expr: expr GREATEROREQUAL . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 132
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 87

   28 expr: expr LESSOREQUAL . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 133
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 88

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


State 89

   38 term: lvalue INCREMENT .

    $default  reduce using rule 38 (term)


State 90

   40 term: lvalue DECREMENT .

    $default  reduce using rule 40 (term)


State 91

   55 member: lvalue LEFT_SQUARE_BRACE . expr RIGHT_SQUARE_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 134
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 92

   54 member: lvalue PERIOD . IDENTIFIER

    IDENTIFIER  shift, and go to state 135


State 93

   44 assignexpr: lvalue $@5 . ASSIGN $@6 expr

    ASSIGN  shift, and go to state 136


State 94

   57 member: call LEFT_SQUARE_BRACE . expr RIGHT_SQUARE_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 137
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 95

   58 call: call LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 138
    objectdef   go to state 35
    const       go to state 38


State 96

   56 member: call PERIOD . IDENTIFIER

    IDENTIFIER  shift, and go to state 139


State 97

   95 ifstmt: ifprefix stmt .
   96       | ifprefix stmt . elseprefix stmt

    ELSE  shift, and go to state 140

    ELSE      [reduce using rule 95 (ifstmt)]
    $default  reduce using rule 95 (ifstmt)

    elseprefix  go to state 141


State 98

   99 whilecond: LEFT_PARENTHESIS . expr RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 142
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 99

  100 whilestmt: whilestart whilecond . stmt

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    stmt        go to state 143
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 100

  103 forstmt: forprefix N . elist RIGHT_PARENTHESIS $@14 N stmt N

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 144
    objectdef   go to state 35
    const       go to state 38


State 101

   63 normallcall: LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS
   67 elist: elist . COMMA expr

    RIGHT_PARENTHESIS  shift, and go to state 145
    COMMA              shift, and go to state 116


State 102

   64 methodcall: DOUBLE_PERIOD IDENTIFIER . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 146


State 103

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   94 ifprefix: IF LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 75
    OR                 shift, and go to state 76
    ADD                shift, and go to state 77
    MINUS              shift, and go to state 78
    MULTIPLICATION     shift, and go to state 79
    DIVISION           shift, and go to state 80
    MODULO             shift, and go to state 81
    EQUAL              shift, and go to state 82
    UNEQUAL            shift, and go to state 83
    GREATER            shift, and go to state 84
    LESS               shift, and go to state 85
    GREATEROREQUAL     shift, and go to state 86
    LESSOREQUAL        shift, and go to state 87
    RIGHT_PARENTHESIS  shift, and go to state 147


State 104

   67 elist: elist . COMMA expr
  101 forprefix: FOR LEFT_PARENTHESIS elist . SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 148
    COMMA      shift, and go to state 116


State 105

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
  105 returnstmt: RETURN $@15 expr . SEMICOLON

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87
    SEMICOLON       shift, and go to state 149


State 106

  107 returnstmt: RETURN $@16 SEMICOLON .

    $default  reduce using rule 107 (returnstmt)


State 107

    9 stmt: BREAK $@1 SEMICOLON .

    $default  reduce using rule 9 (stmt)


State 108

   11 stmt: CONTINUE $@2 SEMICOLON .

    $default  reduce using rule 11 (stmt)


State 109

   78 funcdef: FUNCTION IDENTIFIER @8 . LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 block

    LEFT_PARENTHESIS  shift, and go to state 150


State 110

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS . $@12 idlist RIGHT_PARENTHESIS $@13 block

    $default  reduce using rule 80 ($@12)

    $@12  go to state 151


State 111

   60 call: LEFT_PARENTHESIS funcdef . RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 152


State 112

   15 list_of_stmts: stmt . list_of_stmts

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 16 (list_of_stmts)

    stmt           go to state 112
    list_of_stmts  go to state 153
    expr           go to state 28
    term           go to state 29
    assignexpr     go to state 30
    primary        go to state 31
    lvalue         go to state 32
    member         go to state 33
    call           go to state 34
    objectdef      go to state 35
    block          go to state 36
    funcdef        go to state 37
    const          go to state 38
    ifprefix       go to state 39
    ifstmt         go to state 40
    whilestart     go to state 41
    whilestmt      go to state 42
    forprefix      go to state 43
    forstmt        go to state 44
    returnstmt     go to state 45


State 113

   74 block: LEFT_CURLY_BRACE $@7 list_of_stmts . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE  shift, and go to state 154


State 114

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   72 indexedelem: LEFT_CURLY_BRACE expr . COLON expr RIGHT_CURLY_BRACE

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87
    COLON           shift, and go to state 155


State 115

   68 objectdef: LEFT_SQUARE_BRACE elist RIGHT_SQUARE_BRACE .

    $default  reduce using rule 68 (objectdef)


State 116

   67 elist: elist COMMA . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 156
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 117

   69 objectdef: LEFT_SQUARE_BRACE indexed RIGHT_SQUARE_BRACE .

    $default  reduce using rule 69 (objectdef)


State 118

   71 indexed: indexed COMMA . indexedelem

    LEFT_CURLY_BRACE  shift, and go to state 67

    indexedelem  go to state 157


State 119

   34 term: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 34 (term)


State 120

   48 primary: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS .
   60 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 158

    $default  reduce using rule 48 (primary)


State 121

   30 expr: expr AND $@3 . M expr

    $default  reduce using rule 93 (M)

    M  go to state 159


State 122

   32 expr: expr OR $@4 . M expr

    $default  reduce using rule 93 (M)

    M  go to state 160


State 123

   18 expr: expr . ADD expr
   18     | expr ADD expr .
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    $default  reduce using rule 18 (expr)


State 124

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   19     | expr MINUS expr .
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    $default  reduce using rule 19 (expr)


State 125

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   20     | expr MULTIPLICATION expr .
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    $default  reduce using rule 20 (expr)


State 126

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   21     | expr DIVISION expr .
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    $default  reduce using rule 21 (expr)


State 127

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   22     | expr MODULO expr .
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    $default  reduce using rule 22 (expr)


State 128

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   23     | expr EQUAL expr .
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    EQUAL    error (nonassociative)
    UNEQUAL  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 129

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   24     | expr UNEQUAL expr .
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    EQUAL    error (nonassociative)
    UNEQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 130

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   25     | expr GREATER expr .
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    GREATER         error (nonassociative)
    LESS            error (nonassociative)
    GREATEROREQUAL  error (nonassociative)
    LESSOREQUAL     error (nonassociative)

    $default  reduce using rule 25 (expr)


State 131

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   26     | expr LESS expr .
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    GREATER         error (nonassociative)
    LESS            error (nonassociative)
    GREATEROREQUAL  error (nonassociative)
    LESSOREQUAL     error (nonassociative)

    $default  reduce using rule 26 (expr)


State 132

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   27     | expr GREATEROREQUAL expr .
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    GREATER         error (nonassociative)
    LESS            error (nonassociative)
    GREATEROREQUAL  error (nonassociative)
    LESSOREQUAL     error (nonassociative)

    $default  reduce using rule 27 (expr)


State 133

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   28     | expr LESSOREQUAL expr .
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81

    GREATER         error (nonassociative)
    LESS            error (nonassociative)
    GREATEROREQUAL  error (nonassociative)
    LESSOREQUAL     error (nonassociative)

    $default  reduce using rule 28 (expr)


State 134

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   55 member: lvalue LEFT_SQUARE_BRACE expr . RIGHT_SQUARE_BRACE

    AND                 shift, and go to state 75
    OR                  shift, and go to state 76
    ADD                 shift, and go to state 77
    MINUS               shift, and go to state 78
    MULTIPLICATION      shift, and go to state 79
    DIVISION            shift, and go to state 80
    MODULO              shift, and go to state 81
    EQUAL               shift, and go to state 82
    UNEQUAL             shift, and go to state 83
    GREATER             shift, and go to state 84
    LESS                shift, and go to state 85
    GREATEROREQUAL      shift, and go to state 86
    LESSOREQUAL         shift, and go to state 87
    RIGHT_SQUARE_BRACE  shift, and go to state 161


State 135

   54 member: lvalue PERIOD IDENTIFIER .

    $default  reduce using rule 54 (member)


State 136

   44 assignexpr: lvalue $@5 ASSIGN . $@6 expr

    $default  reduce using rule 43 ($@6)

    $@6  go to state 162


State 137

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   57 member: call LEFT_SQUARE_BRACE expr . RIGHT_SQUARE_BRACE

    AND                 shift, and go to state 75
    OR                  shift, and go to state 76
    ADD                 shift, and go to state 77
    MINUS               shift, and go to state 78
    MULTIPLICATION      shift, and go to state 79
    DIVISION            shift, and go to state 80
    MODULO              shift, and go to state 81
    EQUAL               shift, and go to state 82
    UNEQUAL             shift, and go to state 83
    GREATER             shift, and go to state 84
    LESS                shift, and go to state 85
    GREATEROREQUAL      shift, and go to state 86
    LESSOREQUAL         shift, and go to state 87
    RIGHT_SQUARE_BRACE  shift, and go to state 163


State 138

   58 call: call LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS
   67 elist: elist . COMMA expr

    RIGHT_PARENTHESIS  shift, and go to state 164
    COMMA              shift, and go to state 116


State 139

   56 member: call PERIOD IDENTIFIER .

    $default  reduce using rule 56 (member)


State 140

   97 elseprefix: ELSE .

    $default  reduce using rule 97 (elseprefix)


State 141

   96 ifstmt: ifprefix stmt elseprefix . stmt

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    stmt        go to state 165
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 142

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   99 whilecond: LEFT_PARENTHESIS expr . RIGHT_PARENTHESIS

    AND                shift, and go to state 75
    OR                 shift, and go to state 76
    ADD                shift, and go to state 77
    MINUS              shift, and go to state 78
    MULTIPLICATION     shift, and go to state 79
    DIVISION           shift, and go to state 80
    MODULO             shift, and go to state 81
    EQUAL              shift, and go to state 82
    UNEQUAL            shift, and go to state 83
    GREATER            shift, and go to state 84
    LESS               shift, and go to state 85
    GREATEROREQUAL     shift, and go to state 86
    LESSOREQUAL        shift, and go to state 87
    RIGHT_PARENTHESIS  shift, and go to state 166


State 143

  100 whilestmt: whilestart whilecond stmt .

    $default  reduce using rule 100 (whilestmt)


State 144

   67 elist: elist . COMMA expr
  103 forstmt: forprefix N elist . RIGHT_PARENTHESIS $@14 N stmt N

    RIGHT_PARENTHESIS  shift, and go to state 167
    COMMA              shift, and go to state 116


State 145

   63 normallcall: LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 63 (normallcall)


State 146

   64 methodcall: DOUBLE_PERIOD IDENTIFIER LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 168
    objectdef   go to state 35
    const       go to state 38


State 147

   94 ifprefix: IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 94 (ifprefix)


State 148

  101 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON . M expr SEMICOLON

    $default  reduce using rule 93 (M)

    M  go to state 169


State 149

  105 returnstmt: RETURN $@15 expr SEMICOLON .

    $default  reduce using rule 105 (returnstmt)


State 150

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS . $@9 idlist RIGHT_PARENTHESIS $@10 block

    $default  reduce using rule 76 ($@9)

    $@9  go to state 170


State 151

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 . idlist RIGHT_PARENTHESIS $@13 block

    IDENTIFIER  shift, and go to state 171

    $default  reduce using rule 89 (idlist)

    idlist  go to state 172


State 152

   60 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS . LEFT_PARENTHESIS elist RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 158


State 153

   15 list_of_stmts: stmt list_of_stmts .

    $default  reduce using rule 15 (list_of_stmts)


State 154

   74 block: LEFT_CURLY_BRACE $@7 list_of_stmts RIGHT_CURLY_BRACE .

    $default  reduce using rule 74 (block)


State 155

   72 indexedelem: LEFT_CURLY_BRACE expr COLON . expr RIGHT_CURLY_BRACE

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 173
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 156

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   67 elist: elist COMMA expr .

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    $default  reduce using rule 67 (elist)


State 157

   71 indexed: indexed COMMA indexedelem .

    $default  reduce using rule 71 (indexed)


State 158

   60 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS . elist RIGHT_PARENTHESIS

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    $default  reduce using rule 65 (elist)

    expr        go to state 68
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    elist       go to state 174
    objectdef   go to state 35
    const       go to state 38


State 159

   30 expr: expr AND $@3 M . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 175
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 160

   32 expr: expr OR $@4 M . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 176
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 161

   55 member: lvalue LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE .

    $default  reduce using rule 55 (member)


State 162

   44 assignexpr: lvalue $@5 ASSIGN $@6 . expr

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 177
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 163

   57 member: call LEFT_SQUARE_BRACE expr RIGHT_SQUARE_BRACE .

    $default  reduce using rule 57 (member)


State 164

   58 call: call LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 58 (call)


State 165

   96 ifstmt: ifprefix stmt elseprefix stmt .

    $default  reduce using rule 96 (ifstmt)


State 166

   99 whilecond: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS .

    $default  reduce using rule 99 (whilecond)


State 167

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS . $@14 N stmt N

    $default  reduce using rule 102 ($@14)

    $@14  go to state 178


State 168

   64 methodcall: DOUBLE_PERIOD IDENTIFIER LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS
   67 elist: elist . COMMA expr

    RIGHT_PARENTHESIS  shift, and go to state 179
    COMMA              shift, and go to state 116


State 169

  101 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M . expr SEMICOLON

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    DOUBLE_COLON       shift, and go to state 26

    expr        go to state 180
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    const       go to state 38


State 170

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 . idlist RIGHT_PARENTHESIS $@10 block

    IDENTIFIER  shift, and go to state 171

    $default  reduce using rule 89 (idlist)

    idlist  go to state 181


State 171

   90 idlist: IDENTIFIER .

    $default  reduce using rule 90 (idlist)


State 172

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 idlist . RIGHT_PARENTHESIS $@13 block
   91 idlist: idlist . COMMA IDENTIFIER

    RIGHT_PARENTHESIS  shift, and go to state 182
    COMMA              shift, and go to state 183


State 173

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   72 indexedelem: LEFT_CURLY_BRACE expr COLON expr . RIGHT_CURLY_BRACE

    AND                shift, and go to state 75
    OR                 shift, and go to state 76
    ADD                shift, and go to state 77
    MINUS              shift, and go to state 78
    MULTIPLICATION     shift, and go to state 79
    DIVISION           shift, and go to state 80
    MODULO             shift, and go to state 81
    EQUAL              shift, and go to state 82
    UNEQUAL            shift, and go to state 83
    GREATER            shift, and go to state 84
    LESS               shift, and go to state 85
    GREATEROREQUAL     shift, and go to state 86
    LESSOREQUAL        shift, and go to state 87
    RIGHT_CURLY_BRACE  shift, and go to state 184


State 174

   60 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist . RIGHT_PARENTHESIS
   67 elist: elist . COMMA expr

    RIGHT_PARENTHESIS  shift, and go to state 185
    COMMA              shift, and go to state 116


State 175

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   30     | expr AND $@3 M expr .
   32     | expr . OR $@4 M expr

    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    $default  reduce using rule 30 (expr)


State 176

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   32     | expr OR $@4 M expr .

    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    $default  reduce using rule 32 (expr)


State 177

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
   44 assignexpr: lvalue $@5 ASSIGN $@6 expr .

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87

    $default  reduce using rule 44 (assignexpr)


State 178

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS $@14 . N stmt N

    $default  reduce using rule 92 (N)

    N  go to state 186


State 179

   64 methodcall: DOUBLE_PERIOD IDENTIFIER LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 64 (methodcall)


State 180

   18 expr: expr . ADD expr
   19     | expr . MINUS expr
   20     | expr . MULTIPLICATION expr
   21     | expr . DIVISION expr
   22     | expr . MODULO expr
   23     | expr . EQUAL expr
   24     | expr . UNEQUAL expr
   25     | expr . GREATER expr
   26     | expr . LESS expr
   27     | expr . GREATEROREQUAL expr
   28     | expr . LESSOREQUAL expr
   30     | expr . AND $@3 M expr
   32     | expr . OR $@4 M expr
  101 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr . SEMICOLON

    AND             shift, and go to state 75
    OR              shift, and go to state 76
    ADD             shift, and go to state 77
    MINUS           shift, and go to state 78
    MULTIPLICATION  shift, and go to state 79
    DIVISION        shift, and go to state 80
    MODULO          shift, and go to state 81
    EQUAL           shift, and go to state 82
    UNEQUAL         shift, and go to state 83
    GREATER         shift, and go to state 84
    LESS            shift, and go to state 85
    GREATEROREQUAL  shift, and go to state 86
    LESSOREQUAL     shift, and go to state 87
    SEMICOLON       shift, and go to state 187


State 181

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist . RIGHT_PARENTHESIS $@10 block
   91 idlist: idlist . COMMA IDENTIFIER

    RIGHT_PARENTHESIS  shift, and go to state 188
    COMMA              shift, and go to state 183


State 182

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS . $@13 block

    $default  reduce using rule 81 ($@13)

    $@13  go to state 189


State 183

   91 idlist: idlist COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 190


State 184

   72 indexedelem: LEFT_CURLY_BRACE expr COLON expr RIGHT_CURLY_BRACE .

    $default  reduce using rule 72 (indexedelem)


State 185

   60 call: LEFT_PARENTHESIS funcdef RIGHT_PARENTHESIS LEFT_PARENTHESIS elist RIGHT_PARENTHESIS .

    $default  reduce using rule 60 (call)


State 186

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS $@14 N . stmt N

    IDENTIFIER         shift, and go to state 3
    STRING             shift, and go to state 4
    INTEGER            shift, and go to state 5
    REAL               shift, and go to state 6
    IF                 shift, and go to state 7
    WHILE              shift, and go to state 8
    FOR                shift, and go to state 9
    RETURN             shift, and go to state 10
    BREAK              shift, and go to state 11
    CONTINUE           shift, and go to state 12
    NOT                shift, and go to state 13
    LOCAL              shift, and go to state 14
    TRUE               shift, and go to state 15
    FALSE              shift, and go to state 16
    NIL                shift, and go to state 17
    FUNCTION           shift, and go to state 18
    MINUS              shift, and go to state 19
    INCREMENT          shift, and go to state 20
    DECREMENT          shift, and go to state 21
    LEFT_CURLY_BRACE   shift, and go to state 22
    LEFT_SQUARE_BRACE  shift, and go to state 23
    LEFT_PARENTHESIS   shift, and go to state 24
    SEMICOLON          shift, and go to state 25
    DOUBLE_COLON       shift, and go to state 26

    stmt        go to state 191
    expr        go to state 28
    term        go to state 29
    assignexpr  go to state 30
    primary     go to state 31
    lvalue      go to state 32
    member      go to state 33
    call        go to state 34
    objectdef   go to state 35
    block       go to state 36
    funcdef     go to state 37
    const       go to state 38
    ifprefix    go to state 39
    ifstmt      go to state 40
    whilestart  go to state 41
    whilestmt   go to state 42
    forprefix   go to state 43
    forstmt     go to state 44
    returnstmt  go to state 45


State 187

  101 forprefix: FOR LEFT_PARENTHESIS elist SEMICOLON M expr SEMICOLON .

    $default  reduce using rule 101 (forprefix)


State 188

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS . $@10 block

    $default  reduce using rule 77 ($@10)

    $@10  go to state 192


State 189

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 . block

    LEFT_CURLY_BRACE  shift, and go to state 22

    block  go to state 193


State 190

   91 idlist: idlist COMMA IDENTIFIER .

    $default  reduce using rule 91 (idlist)


State 191

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS $@14 N stmt . N

    $default  reduce using rule 92 (N)

    N  go to state 194


State 192

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 . block

    LEFT_CURLY_BRACE  shift, and go to state 22

    block  go to state 195


State 193

   82 funcdef: FUNCTION @11 LEFT_PARENTHESIS $@12 idlist RIGHT_PARENTHESIS $@13 block .

    $default  reduce using rule 82 (funcdef)


State 194

  103 forstmt: forprefix N elist RIGHT_PARENTHESIS $@14 N stmt N .

    $default  reduce using rule 103 (forstmt)


State 195

   78 funcdef: FUNCTION IDENTIFIER @8 LEFT_PARENTHESIS $@9 idlist RIGHT_PARENTHESIS $@10 block .

    $default  reduce using rule 78 (funcdef)
